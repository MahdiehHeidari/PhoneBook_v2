@model Domain.Person

@{
    Layout = null;
}


<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">

    <link rel="stylesheet" href="~/css/site.css">

    <script src="~/js/site.js" type="text/javascript"></script>


    <title>Create</title>
</head>
<body>
    <h4>Person</h4>
    <hr />
    <div class="container">

        <form asp-controller="person" asp-action="Create" method="post" class="well form-horizontal">

            <div class="form-group">
                <label class="col-md-4 control-label">First Name</label>
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                <div class="col-md-4 inputGroupContainer">
                    <div class="input-group">
                        <span class="input-group-addon"><i class="glyphicon glyphicon-user"></i></span>
                        <input asp-for="FirstName" class="form-control" />
                        <span asp-validation-for="FirstName" class="text-danger"></span>

                    </div>
                </div>
            </div>
           
                <!-- LastName-->

                <div class="form-group">
                    <label class="col-md-4 control-label">Last Name</label>
                    <div class="col-md-4 inputGroupContainer">
                        <div class="input-group">
                            <span class="input-group-addon"><i class="glyphicon glyphicon-user"></i></span>
                            <input asp-for="LastName" class="form-control" />
                            <span asp-validation-for="LastName" class="text-danger"></span>

                        </div>
                    </div>
                </div>
                <!-- Phones-->

                <div class="form-group">
                    <label class="col-md-4 control-label">Phone</label>
                    <div class="col-md-4 inputGroupContainer">
                        <div class="input-group">
                            <div id="phoneContainer">
                                <!-- اینجا فیلدها با جاوااسکریپت ایجاد می‌شوند -->
                            </div>
                            <button type="button" onclick="addPhoneNumber()">افزودن تلفن</button>
                            <button type="button" onclick="validateAndSave()">ذخیره</button>
                        </div>
                    </div>
                </div>


               
        </form>
    </div>

    <script>
function validateAndSave() {
    // Check if First Name and Last Name are empty
    var firstNameInput = document.querySelector('input[name="FirstName"]');
    var lastNameInput = document.querySelector('input[name="LastName"]');

    var firstName = firstNameInput.value;
    var lastName = lastNameInput.value;
    var regexPersian = new RegExp("^([\u0600-\u06FF]+\s?)+$");

    var NameIsPersian = regexPersian.test(firstName);
    var lastNameIsPersian = regexPersian.test(lastName);
    


    clearErrorMessages();
    if (NameIsPersian === false) {
       
        displayErrorMessage(firstNameInput, 'لطفا از حروف الفبای فارسی استفاده شود ');
        return; // Stop further processing
    }
   
    if (lastNameIsPersian === false) {
        displayErrorMessage(lastNameInput, 'لطفا از حروف الفبای فارسی استفاده شود ');
       return; // Stop further processing
    }
    if (firstName === '') {
        displayErrorMessage(firstNameInput, 'نام نمیتواند خالی باشد');
        return; // Stop further processing
    }
    if (firstName.length < 3) {
        displayErrorMessage(firstNameInput, 'نام باید حداقل شامل سه حرف باشد ');
        return; // Stop further processing
    }
    if (lastName === '') {
        displayErrorMessage(lastNameInput, 'نام خانوادگی نمیتواند خالی باشد ');
        return; // Stop further processing
    }


    // اعمال محدودیت‌ها به تمام ایمپوت‌ها
                var phoneInputs = document.querySelectorAll('#phoneContainer input[type="text"]');
                var typeSelects = document.querySelectorAll('#phoneContainer select[name^="Phones"]');


                var accepted = true;
                for (var i = 0; i < phoneInputs.length; i++) {
                    var phoneNumber = phoneInputs[i].value;
                    var selectedType = typeSelects[i].value;

                    var constraintMessage = validatePhoneNumber(phoneNumber, selectedType);
                    var constraintSpan = typeSelects[i].nextElementSibling;
                    if (constraintMessage != 'ok') {
                        accepted = false;
                        constraintSpan.innerText = constraintMessage;

                    }
                    else if (constraintMessage == 'ok') {
                        constraintSpan.innerText = null;
                    }

                }
                if (accepted) {
                    document.querySelector('form').submit();
                }


            }

            function validatePhoneNumber(phoneNumber, selectedType) {

                var regexMobile = new RegExp("^(\\+98|0)?9\\d{9}$");
                var regexHome = new RegExp("^0[0-9]{2}[0-9]{8}$");


                if (phoneNumber == '0') {
                    return 'شماره تلفن نمیتواند خالی باشد';
                }
                if (selectedType == '-1') {
                    return 'لطفا  نوع شماره تلفن را وارد کنید';
                }
                if (selectedType == '0' && !regexHome.test(phoneNumber)) {
                    return 'فرمت شماره شما صحیح نیست';
                }
                else if (selectedType == '1' && !regexMobile.test(phoneNumber)) {
                    return 'فرمت شماره شما صحیح نیست';
                }
                else if (selectedType == '2' && !regexHome.test(phoneNumber)) {
                    return 'فرمت شماره شما صحیح نیست';
                }
                return 'ok';

            }
            function displayErrorMessage(element, errorMessage) {
                // Create and insert an error message element below the specified element
                var errorMessageElement = document.createElement('span');
                errorMessageElement.classList.add('text-danger');
                errorMessageElement.style.display = 'block'; // Make it a block element
                errorMessageElement.innerText = errorMessage;

                // Insert the error message below the specified element
                element.parentNode.appendChild(errorMessageElement);
            }
            function clearErrorMessages() {
                // Remove all existing error messages
                var existingErrorMessages = document.querySelectorAll('.text-danger');
                existingErrorMessages.forEach(function (element) {
                    element.remove();
                });
            }

    </script>

        <div>
            <a asp-action="Index">Back to List</a>
        </div>
</body>
</html>
